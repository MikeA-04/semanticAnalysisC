#light





namespace compiler
  module lexer = begin
    val private keywords : string list
    val private identifier_start : char list
    val private identifier_chars : char list
    val private lookupKeyword : id:string -> string
    val private nextChar : input:System.IO.StreamReader -> char
    val private skipRestOfLine : input:System.IO.StreamReader -> unit
    val private collectID :
      nextc:char -> input:System.IO.StreamReader -> id:string -> string * char
    val private collectStrLiteral :
      nextc:char -> input:System.IO.StreamReader -> literal:string -> string
    val private collectIntLiteral :
      nextc:char ->
        input:System.IO.StreamReader -> literal:string -> string * char
    val private collectRealLiteral :
      nextc:char ->
        input:System.IO.StreamReader -> literal:string -> string * char
    val private lexer :
      nextc:char ->
        input:System.IO.StreamReader -> tokens:string list -> string list
    val analyze : filename:string -> string list
  end

namespace compiler
  module parser = begin
    val private matchToken :
      expected_token:string -> tokens:string list -> string list
    val private expr_value : tokens:string list -> string list
    val private expr_op : tokens:string list -> string list
    val private expr : tokens:string list -> string list
    val private empty : tokens:string list -> string list
    val private vardecl : tokens:string list -> string list
    val private input : tokens:string list -> string list
    val private output_value : tokens:string list -> string list
    val private output : tokens:string list -> string list
    val private assignment : tokens:string list -> string list
    val private stmt : tokens:string list -> string list
    val private ifstmt : tokens:string list -> string list
    val private condition : tokens:string list -> string list
    val private then_part : tokens:string list -> string list
    val private else_part : tokens:string list -> string list
    val private morestmts : tokens:string list -> string list
    val private stmts : tokens:string list -> string list
    val private simpleC : tokens:string list -> string list
    val parse : tokens:string list -> string
  end

namespace compiler
  module analyzer = begin
    val private matchToken :
      expected_token:'a -> tokens:string list -> string list
    val private expr_value : tokens:'a list -> 'a list
    val private expr_op : tokens:string list -> string list
    val private expr : tokens:string list -> string list
    val private empty : tokens:string list -> string list
    val getVarName : str:string -> name:string -> string
    val private checkDup : symbTable:(string * 'a) list -> name:string -> unit
    val private vardecl :
      tokens:string list ->
        symbT:(string * string) list -> string list * (string * string) list
    val private input : tokens:string list -> string list
    val private output_value : tokens:string list -> string list
    val private output : tokens:string list -> string list
    val private assignment : tokens:string list -> string list
    val private stmt :
      tokens:string list ->
        symbT:(string * string) list -> string list * (string * string) list
    val private ifstmt :
      tokens:string list ->
        symbTable:(string * string) list -> string list * (string * string) list
    val private condition : tokens:string list -> string list * 'a list
    val private then_part :
      tokens:string list ->
        symbTable:(string * string) list -> string list * (string * string) list
    val private else_part :
      tokens:string list ->
        symbTable:(string * string) list -> string list * (string * string) list
    val private morestmts :
      tokens:string list ->
        symbT:(string * string) list -> string list * (string * string) list
    val private stmts :
      tokens:string list ->
        symbT:(string * string) list -> string list * (string * string) list
    val private simpleC :
      tokens:string list -> string list * (string * string) list
    val build_symboltable :
      tokens:string list -> string * (string * string) list
  end

namespace compiler
  module checker = begin
    val private matchToken :
      expected_token:string -> tokens:string list -> string list
    val private getVarName : name:string -> string
    val private check : symbTable:(string * 'a) list -> name:string -> unit
    val private returnType :
      name:'a -> symbT:('a * 'b) list -> 'b when 'a : equality
    val private expr_value :
      tokens:string list ->
        symbTable:(string * string) list -> string list * string
    val private expr_op : tokens:string list -> string list
    val private checkOperation :
      varType:string ->
        literal:string -> op:string -> symbT:'a -> intIdent:int -> unit
    val private validIdentifiers :
      ident1:string ->
        type1:string -> ident2:string -> type2:string -> op:string -> unit
    val private validArithOp :
      ident1:string ->
        type1:string ->
          ident2:string -> type2:string -> op:string -> symbolTable:'a -> unit
    val private warning : t1:string -> t2:'a -> op:string -> unit
    val private expr :
      tokens:string list ->
        symbolTable:(string * string) list -> string list * string
    val private empty : tokens:string list -> string list
    val private vardecl : tokens:string list -> string list
    val private input :
      tokens:string list -> symbolTable:(string * 'a) list -> string list
    val private output_value :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val private output :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val private assignment :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val private stmt :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val private ifstmt :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val private condition :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val private then_part :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val private else_part :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val private morestmts :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val private stmts :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val private simpleC :
      tokens:string list -> symbolTable:(string * string) list -> string list
    val typecheck :
      tokens:string list -> symboltable:(string * string) list -> string
  end

module Main
val main : argv:string [] -> int

